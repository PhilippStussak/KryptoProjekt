/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FermatFrame.java
 *
 * Created on 29.06.2010, 17:14:20
 */

package kryptoprojekt.primeFrames;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Color;
import java.awt.Font;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.regex.Pattern;
import javax.swing.JTextPane;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JLabel;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import kryptoprojekt.ConnectionHandler;
import kryptoprojekt.Kit;
import kryptoprojekt.model.Tuple;
import java.util.ArrayList;
import kryptoprojekt.model.KryptoType;
import kryptoprojekt.model.Z;
import kryptoprojekt.model.PrimeTest;
import kryptoprojekt.model.FermatZ;
import kryptoprojekt.model.Triple;
import kryptoprojekt.controller.PrimeTestController;
import java.lang.reflect.InvocationTargetException;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import kryptoprojekt.controller.LogicValidator;

/**
 *
 * @author Michael
 */
public class FermatFrame extends Kit {

    private DropTextField basesTextField = getDropTextField();
    private DropTextField moduloTextField = getDropTextField();
    private LinkedList<String> extendList;
    private LinkedList<LinkedList<String>> extension;
    private StringBuilder outputWindow;
    private StyledDocument doc;
    private Font fontSettings;
    private boolean correctArguments; //zeigt an, ob für Basen und Moduls korrekte Werte übergeben wurden

    /** Creates new form FermatFrame */
    public FermatFrame(ConnectionHandler handler) {
        super(handler);
        initComponents();
        initLogicComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(kryptoprojekt.KryptoProjektApp.class).getContext().getResourceMap(FermatFrame.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 257, Short.MAX_VALUE)
        );

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 258, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JInternalFrame frame = new JInternalFrame(getTitle() + "_extension", true, true, true, true);
        frame.setLocation(getX(), getY());
        frame.setSize(400, 340);

        JTextPane fermatPane = new JTextPane(){
            @Override
            public boolean getScrollableTracksViewportWidth(){
                return false;
            }
        };
        fermatPane.setEditable(false);
        doc = fermatPane.getStyledDocument();
        Style defaultStyle = doc.getStyle("default");
        Style intermediateHeadStyle = doc.addStyle("outputHead", defaultStyle);
        StyleConstants.setFontSize(intermediateHeadStyle, StyleConstants.getFontSize(intermediateHeadStyle)+1);
        StyleConstants.setBold(intermediateHeadStyle, true);
        if(extension != null){
            for (LinkedList<String> linkedStringList : extension){
                append(linkedStringList.pollFirst()+ "\n", intermediateHeadStyle.getName());
                for (String intermediateValues : linkedStringList){
                        append(intermediateValues+ "\n", defaultStyle.getName());
                }
                append("\n", defaultStyle.getName());
            }
        }
        fermatPane.setVisible(true);
        JScrollPane scrollPane = new JScrollPane(fermatPane, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPane.getViewport().setBackground(Color.white);
        frame.add(scrollPane);
        frame.setVisible(true);
        getParent().add(frame);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void append(String text, String styleName){
        try{
            doc.insertString(doc.getLength(), text, doc.getStyle(styleName));
        } catch (BadLocationException e) {
            //System.err.println("get Message Ausgabe: Fehler in der Start.java: " +e.getMessage());
            e.printStackTrace();
        }
    }

    private void initLogicComponents() {
        jPanel1.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();

        basesTextField.addKeyListener(new KeyListener() {

            public void keyTyped(KeyEvent e) {
            }

            public void keyPressed(KeyEvent e) {
            }
            
            //checkt ob gültige Eingabe in TextFeld gemacht wurde (Zahlen, Komma, Punkte, Leerzeichen, Bindestriche)
            public void keyReleased(KeyEvent e) {
                StringBuilder numbSequence = new StringBuilder(basesTextField.getText());
                int dashPos = 0;
                boolean checkOther = true;

                //checkt ob vor und hinter dem '-' eine Zahl steht. Wenn nein, markiere bases textfield rot.
                int assertCounter = 0;
                if(dashPos != -1){
                    for(int k = 0; k < numbSequence.length() && k>=0;){
                        assert assertCounter < basesTextField.getText().length(): "Too many iterations.";
                        dashPos = numbSequence.indexOf("-", k);
                        k = -1;
                        if(dashPos >0 && dashPos < numbSequence.length()-1){
                            if(LogicValidator.isPosInteger(String.valueOf(numbSequence.charAt(dashPos-1))) && LogicValidator.isPosInteger(String.valueOf(numbSequence.charAt(dashPos+1)))){
                            numbSequence = numbSequence.deleteCharAt(dashPos);
                                 k = dashPos;
                            }else{
                                dashPos = -1; //wrong parameter
                                checkOther = false;
                            }
                        }else if(dashPos == 0){
                            dashPos = -1; //wrong parameter
                            checkOther = false;
                        }
                        assertCounter++;
                    }
                    assertCounter = 0;
                }

                if (checkOther){
                    numbSequence = deleteChar(numbSequence, ","); //alle Kommata löschen
                    numbSequence = deleteChar(numbSequence, "."); //alle Punkte löschen
                    numbSequence = deleteChar(numbSequence, " "); //alle Leerzeichen löschen
                }
                if (LogicValidator.isPosInteger(numbSequence.toString())) {
                    basesTextField.setForeground(Color.black);
                    correctArguments = true;
                } else {
                    basesTextField.setForeground(Color.red);
                    correctArguments = false;
                }
            }
        });

        moduloTextField.addKeyListener(new KeyListener() {

            public void keyTyped(KeyEvent e) {
            }

            public void keyPressed(KeyEvent e) {
            }

            //checkt ob gültige Eingabe in TextFeld gemacht wurde (Zahlen, Komma, Punkte, Leerzeichen, Bindestriche)
            public void keyReleased(KeyEvent e) {
                StringBuilder numbSequence = new StringBuilder(moduloTextField.getText());
                int dashPos = 0;
                boolean checkOther = true;

                //checkt ob vor und hinter dem '-' eine Zahl steht. Wenn nein, markiere modulo textfield rot.
                int assertCounter = 0;
                if(dashPos != -1){
                    for(int k = 0; k < numbSequence.length() && k>=0;){
                        assert assertCounter < moduloTextField.getText().length(): "Too many iterations.";
                        dashPos = numbSequence.indexOf("-", k);
                        k = -1;
                        if(dashPos >0 && dashPos < numbSequence.length()-1){
                            if(LogicValidator.isPosInteger(String.valueOf(numbSequence.charAt(dashPos-1))) && LogicValidator.isPosInteger(String.valueOf(numbSequence.charAt(dashPos+1)))){
                            numbSequence = numbSequence.deleteCharAt(dashPos);
                                 k = dashPos;
                            }else{
                                dashPos = -1; //wrong parameter
                                checkOther = false;
                            }
                        }else if(dashPos == 0){
                            dashPos = -1; //wrong parameter
                            checkOther = false;
                        }
                        assertCounter++;
                    }
                    assertCounter = 0;
                }

                if (checkOther){
                    numbSequence = deleteChar(numbSequence, ","); //alle Kommata löschen
                    numbSequence = deleteChar(numbSequence, "."); //alle Punkte löschen
                    numbSequence = deleteChar(numbSequence, " "); //alle Leerzeichen löschen
                }
                if (LogicValidator.isPosInteger(numbSequence.toString())) {
                    moduloTextField.setForeground(Color.black);
                    correctArguments = true;
                } else {
                    moduloTextField.setForeground(Color.red);
                    correctArguments = false;
                }
            }
        });

        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 0;
        JLabel l = new JLabel();
        l.setText("Base:");
        jPanel1.add(l, c);

        c.weightx = 0.2;
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 1;
        jPanel1.add(basesTextField, c);

        c.weightx = 0.4;
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 2;
        JLabel l2 = new JLabel();
        l2.setText("Modul:");
        jPanel1.add(l2, c);

        c.weightx = 0.2;
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 3;
        jPanel1.add(moduloTextField, c);

        c.weightx = 1;
        c.fill = GridBagConstraints.BOTH;
        c.gridwidth = 3;
        c.gridx = 0;
        c.gridy = 4;
        jPanel1.add(getDragList(new Object[]{getTitle() + "_primeFermat"}), c);

        this.setSize(250, 170);
    }

    //löscht den übergebenen char aus dem übergebenen String raus
    private StringBuilder deleteChar(StringBuilder originalString, String delChar, int fromIndex){
        StringBuilder withoutCharString = new StringBuilder(originalString);
        int charPosition = withoutCharString.indexOf(delChar, fromIndex);
        while(charPosition >=0){
            withoutCharString = withoutCharString.deleteCharAt(charPosition);
            charPosition = withoutCharString.indexOf(delChar, charPosition);
        }
        return withoutCharString;
    }

    private StringBuilder deleteChar(StringBuilder originalString, String delChar){
        return deleteChar(originalString, delChar, 0);
    }

    //splittet die Zahlenreihe in eine ArrayList auf
    //1.250, 15.0.0, 17, 18,,,19,,  21, , 23  24,25, 26,   28,,,  ,,29 , 30,54,  ,, ,,, , ,, ,  ,,  31, ..., .31, 21..., 60-65... //diese Zahlen in der Anordnung in die Testklasse aufnehmen - müssen dem regulären Ausdruck standhalten
    private ArrayList<KryptoType> splitInputToZ(String splitMe){
        Pattern baseModulSeparator = Pattern.compile("(([,]+[\\s]*)+|([\\s]+[,]*)+)"); //split an input list of bases and moduls(primes)
        Pattern dashSeparator = Pattern.compile("[\\-]");
        StringBuilder numbSequence = new StringBuilder(splitMe);
        int delPointPos = 0;

        if(correctArguments == false){
            throw new IllegalArgumentException("Wrong parameters found for bases, modules in window FermatTest " +getTitle());
        }
        //entfernt alle Punkte aus der Zahlenreihe
        for (int i = 0; i < numbSequence.length() && i>=0;){
            delPointPos = numbSequence.indexOf(".", i);
            if(delPointPos != -1){
                numbSequence = numbSequence.deleteCharAt(delPointPos);
            }
            i = delPointPos;
        }
        String[] result = baseModulSeparator.split(numbSequence);
        ArrayList<KryptoType> resultZ = new ArrayList<KryptoType>();
        for(String s : result){
            if(s.contains("-")){ //prüft ob eine range übergeben wurde und füllt diese auf
                String[] range = dashSeparator.split(s);
                resultZ.addAll(fillKryptoTypeZList(range));
                continue;
            }
            resultZ.add(new Z(s));
        }
        return resultZ;
    }

    //Füllt eine Liste mit Z von start bis end auf
    private ArrayList<Z> fillKryptoTypeZList(String[] range){
        //Precondition
        assert range.length == 2: "Error, the array has more than 2 elements: " +Arrays.toString(range);
        ArrayList<Z> listKrypto = new ArrayList<Z>();
        int first = Integer.valueOf(range[0]);
        int second = Integer.valueOf(range[1]);
        int start, end;
        
        if(first <= second){
            start = first;
            end = second;
        }else{
            start =second;
            end = first;
        }
        while(start <= end){
            listKrypto.add(new Z(start));
            start++;
        }
        return listKrypto;
    }

    @Override
    public String execute(){
        ArrayList<KryptoType> basen = new ArrayList<KryptoType>();
        ArrayList<KryptoType> moduls = new ArrayList<KryptoType>();
        ArrayList<Triple<Boolean, Double, LinkedList<String>>> result; //beinhaltet für jede Primzahl einzeln ob es prime ist, Wahrscheinlichkeit, Zwischenschritte

        if(basesTextField.getResult() != null)
            basen.add((KryptoType)basesTextField.getResult());
        else
            basen = splitInputToZ(basesTextField.getText());
        if(moduloTextField.getResult() != null)
            moduls.add((KryptoType)moduloTextField.getResult());
        else
            moduls = splitInputToZ(moduloTextField.getText());        

        try{
            result = PrimeTestController.primeTestFermat(basen, moduls);
        }catch(RuntimeException e){
            return e.getMessage();
        }catch(NoSuchMethodException e){
            return e.getMessage();
        }catch(InstantiationException e){
            return e.getMessage();
        }catch(IllegalAccessException e){
            return e.getMessage();
        }catch(InvocationTargetException e){
            return e.getMessage();
        }
        extendList = new LinkedList<String>();
        extension = new LinkedList<LinkedList<String>>(); //ist die Gesamtliste an Zwischenschritten wenn auf den Button extend geklickt wird
        outputWindow = new StringBuilder();
        int i = 0;
        String probability = "";
        for(Triple<Boolean, Double, LinkedList<String>> output: result){
            if (output.second() == -2.0){
                probability = "undefined";
            }else{
                double probDouble = output.second()*100;
                probability = String.valueOf(probDouble)+"%";
            }                    
            extendList = output.third(); //erhält von der jeweiligen Primzahl die Zwischenschritte
            extendList.addFirst(moduls.get(i)+ ":");
            extendList.addLast("result");
            extendList.addLast(moduls.get(i)+ " is prime number: " +output.first()+ "    probability = " +probability);
            extension.add(extendList);

            outputWindow.append(moduls.get(i) + ": "  + result.get(i).first()+ "\n");
            results.put(getTitle() + "_primeFermat", output.first());
            i++;
        }
        return "In Window " + getTitle() + ": " + "\n\nprime numbers:\n" +outputWindow.toString();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables



}

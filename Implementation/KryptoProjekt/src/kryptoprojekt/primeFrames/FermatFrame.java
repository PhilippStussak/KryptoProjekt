/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FermatFrame.java
 *
 * Created on 29.06.2010, 17:14:20
 */

package kryptoprojekt.primeFrames;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Color;
import java.awt.Font;
import java.util.LinkedList;
import javax.swing.JTextPane;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JLabel;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import kryptoprojekt.ConnectionHandler;
import kryptoprojekt.Kit;
import kryptoprojekt.model.Tuple;
import java.util.ArrayList;
import kryptoprojekt.model.KryptoType;
import kryptoprojekt.model.Z;
import kryptoprojekt.model.PrimeTest;
import kryptoprojekt.model.FermatZ;
import kryptoprojekt.model.Triple;
import kryptoprojekt.controller.PrimeTestController;
import java.lang.reflect.InvocationTargetException;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import kryptoprojekt.controller.LogicValidator;

/**
 *
 * @author Michael
 */
public class FermatFrame extends Kit {

    private DropTextField basesTextField = getDropTextField();
    private DropTextField moduloTextField = getDropTextField();
    private LinkedList<String> extendList;
    private LinkedList<LinkedList<String>> extension;
    private StringBuilder outputWindow;
    private StyledDocument doc;
    Font fontSettings;

    /** Creates new form FermatFrame */
    public FermatFrame(ConnectionHandler handler) {
        super(handler);
        initComponents();
        initLogicComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(kryptoprojekt.KryptoProjektApp.class).getContext().getResourceMap(FermatFrame.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 257, Short.MAX_VALUE)
        );

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 258, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JInternalFrame frame = new JInternalFrame(getTitle() + "_extension", true, true, true, true);
        frame.setLocation(getX(), getY());
        frame.setSize(400, 340);

        JTextPane fermatPane = new JTextPane(){
            @Override
            public boolean getScrollableTracksViewportWidth(){
                return false;
            }
        };
        fermatPane.setEditable(false);
        doc = fermatPane.getStyledDocument();
        Style defaultStyle = doc.getStyle("default");
        Style intermediateHeadStyle = doc.addStyle("outputHead", defaultStyle);
        StyleConstants.setFontSize(intermediateHeadStyle, StyleConstants.getFontSize(intermediateHeadStyle)+1);
        StyleConstants.setBold(intermediateHeadStyle, true);
        for (LinkedList<String> linkedStringList : extension){
            append(linkedStringList.pollFirst()+ "\n", intermediateHeadStyle.getName());
            for (String intermediateValues : linkedStringList){
                    append(intermediateValues+ "\n", defaultStyle.getName());
            }
            append("\n", defaultStyle.getName());
        }
        fermatPane.setVisible(true);
        JScrollPane scrollPane = new JScrollPane(fermatPane, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPane.getViewport().setBackground(Color.white);
        frame.add(scrollPane);
        frame.setVisible(true);
        getParent().add(frame);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void append(String text, String styleName){
        try{
            doc.insertString(doc.getLength(), text, doc.getStyle(styleName));
        } catch (BadLocationException e) {
            //System.err.println("get Message Ausgabe: Fehler in der Start.java: " +e.getMessage());
            e.printStackTrace();
        }
    }

    private void initLogicComponents() {
        jPanel1.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();

        basesTextField.addKeyListener(new KeyListener() {

            public void keyTyped(KeyEvent e) {
            }

            public void keyPressed(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
                if (LogicValidator.isInteger(basesTextField.getText())) {
                    basesTextField.setForeground(Color.black);
                } else {
                    basesTextField.setForeground(Color.red);
                }
            }
        });

        moduloTextField.addKeyListener(new KeyListener() {

            public void keyTyped(KeyEvent e) {
            }

            public void keyPressed(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
                if (LogicValidator.isInteger(moduloTextField.getText())) {
                    moduloTextField.setForeground(Color.black);
                } else {
                    moduloTextField.setForeground(Color.red);
                }
            }
        });

        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 0;
        JLabel l = new JLabel();
        l.setText("Base:");
        jPanel1.add(l, c);

        c.weightx = 0.2;
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 1;
        jPanel1.add(basesTextField, c);

        c.weightx = 0.4;
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 2;
        JLabel l2 = new JLabel();
        l2.setText("Modul:");
        jPanel1.add(l2, c);

        c.weightx = 0.2;
        c.fill = GridBagConstraints.BOTH;
        c.gridx = 0;
        c.gridy = 3;
        jPanel1.add(moduloTextField, c);

        c.weightx = 1;
        c.fill = GridBagConstraints.BOTH;
        c.gridwidth = 3;
        c.gridx = 0;
        c.gridy = 4;
        jPanel1.add(getDragList(new Object[]{getTitle() + "_primeFermat"}), c);

        this.setSize(250, 170);
    }

    @Override
    public String execute(){
        ArrayList<KryptoType> basen = new ArrayList<KryptoType>();
        ArrayList<KryptoType> moduls = new ArrayList<KryptoType>();
        ArrayList<Triple<Boolean, Double, LinkedList<String>>> result;

        if(basesTextField.getResult() != null)
            basen.add((KryptoType)basesTextField.getResult());
        else
            basen.add(new Z (basesTextField.getText()));
        if(moduloTextField.getResult() != null)
            moduls.add((KryptoType)moduloTextField.getResult());
        else
            moduls.add(new Z(moduloTextField.getText()));

        //Strings[] stringtest = basen.split("\\$");

        try{
            result = PrimeTestController.primeTestFermat(basen, moduls);
        }catch(RuntimeException e){
            return e.getMessage();
        }catch(NoSuchMethodException e){
            return e.getMessage();
        }catch(InstantiationException e){
            return e.getMessage();
        }catch(IllegalAccessException e){
            return e.getMessage();
        }catch(InvocationTargetException e){
            return e.getMessage();
        }
        extendList = new LinkedList<String>();
        extension = new LinkedList<LinkedList<String>>();
        outputWindow = new StringBuilder();
        int i = 0;
        String probability = "";
        for(Triple<Boolean, Double, LinkedList<String>> output: result){
            if (output.second() == -2.0){
                probability = "undefined";
            }else{
                double probDouble = output.second()*100;
                probability = String.valueOf(probDouble)+"%";
            }                    
            extendList = output.third();
            extendList.addFirst(moduls.get(i)+ ":");
            extendList.addLast("result");
            extendList.addLast(moduls.get(i)+ " is prime number: " +output.first()+ "    probability = " +probability);
            extension.add(extendList);

            outputWindow.append(moduls.get(i) + ": "  + result.get(i).first()+ "\n");
            results.put(getTitle() + "_primeFermat", output.first());
            i++;
        }
        return "In Window " + getTitle() + ": " + "\n\nPrimzahlen:\n" +outputWindow.toString();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables



}
